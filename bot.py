import telebot
from telebot import types
import requests
from flask import Flask, request
import os
from auto_fetch import fetch_new_p2e


# üîë –¢–æ–∫–µ–Ω –±–æ—Ç–∞ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
BOT_TOKEN = os.getenv("BOT_TOKEN")
bot = telebot.TeleBot(BOT_TOKEN)

# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
def main_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(
        types.KeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ"),
        types.KeyboardButton("üéÆ –ù–æ–≤—ã–µ P2E –∏–≥—Ä—ã"),
        types.KeyboardButton("üéÅ NFT Airdrop")
    )
    return markup

# --- –ö–æ–º–∞–Ω–¥—ã ---
@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(
        message.chat.id,
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ P2E/NFT –ø—Ä–æ–µ–∫—Ç–æ–≤.\n\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu()
    )

@bot.message_handler(commands=['info'])
def info(message):
    bot.send_message(
        message.chat.id,
        "‚ÑπÔ∏è –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –æ P2E-–∏–≥—Ä–∞—Ö –∏ NFT airdrop.\n‚ö° –°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.",
        reply_markup=main_menu()
    )

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤ —á–µ—Ä–µ–∑ CoinGecko ---
def get_projects():
    try:
        url = "https://api.coingecko.com/api/v3/coins/markets"
        params = {
            "vs_currency": "usd",
            "category": "play-to-earn",
            "order": "market_cap_desc",
            "per_page": 5,
            "page": 1,
            "sparkline": "false"
        }
        response = requests.get(url, params=params)
        data = response.json()
        projects = []
        for p in data:
            projects.append(f"{p['name']} ({p['symbol'].upper()}): ${p['current_price']}\n–ü–æ–¥—Ä–æ–±–Ω–µ–µ: https://www.coingecko.com/en/coins/{p['id']}")
        return "\n\n".join(projects)
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤: {e}"

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ ---
@bot.message_handler(func=lambda message: True)
def handle_message(message):
    text = message.text.lower()

    if "–∏–Ω—Ñ–æ" in text:
        bot.send_message(message.chat.id, "üìò –≠—Ç–æ—Ç –±–æ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç P2E/NFT –ø—Ä–æ–µ–∫—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.", reply_markup=main_menu())
    elif "–Ω–æ–≤—ã–µ p2e –∏–≥—Ä—ã" in text:
        bot.send_message(message.chat.id, "üéÆ –ü–æ—Å–ª–µ–¥–Ω–∏–µ P2E –ø—Ä–æ–µ–∫—Ç—ã:\n\n" + get_projects())
    elif "nft airdrop" in text:
        bot.send_message(message.chat.id, "üéÅ –ü—Ä–∏–º–µ—Ä—ã —Ç–µ–∫—É—â–∏—Ö NFT Airdrop:\n- Pixels NFT\n- Mythos Chain\n- Animoca", reply_markup=main_menu())
    else:
        bot.send_message(message.chat.id, "‚ùì –ù–µ –ø–æ–Ω–∏–º–∞—é –∫–æ–º–∞–Ω–¥—É. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.", reply_markup=main_menu())

# --- Flask –¥–ª—è Webhook ---
app = Flask(__name__)
WEBHOOK_URL = os.getenv("WEBHOOK_URL")  # –£–∫–∞–∂–∏ URL —Å–µ—Ä–≤–∏—Å–∞ Render

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Webhook
bot.remove_webhook()
bot.set_webhook(url=WEBHOOK_URL)

@app.route("/", methods=['POST'])
def webhook():
    json_str = request.get_data().decode('utf-8')
    update = telebot.types.Update.de_json(json_str)
    bot.process_new_updates([update])
    return "OK", 200

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ Flask –Ω–∞ Render
    app.run(host="0.0.0.0", port=10000)
    
    @bot.message_handler(commands=['autogames'])
def autogames_cmd(message):
    bot.send_chat_action(message.chat.id, 'typing')
    games = fetch_new_p2e(limit=5)
    if not games:
        bot.reply_to(message, "üòï –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–µ –ø—Ä–æ–µ–∫—Ç—ã.")
        return
    text = "üéØ *–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ P2E-–ø—Ä–æ–µ–∫—Ç–æ–≤:*\n\n"
    for g in games:
        text += f"üéÆ *{g['name']}*\nüóÇ {g['genre']}\nüîó {g['link']}\n\n"
    bot.send_message(message.chat.id, text, parse_mode="Markdown")

